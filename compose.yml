services:
        # https://github.com/deviantony/docker-elk/blob/main/docker-compose.yml
        #  elasticsearch:
        #    image: elasticsearch:8.7.0
        #    environment:
        #      - node.name=elasticsearch
        #      - discovery.type=single-node
        #      - cluster.name=docker-cluster
        #      - bootstrap.memory_lock=true
        #      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        #      - ELASTIC_PASSWORD=changeme
        #    ulimits:
        #      memlock:
        #        soft: -1
        #        hard: -1
        #    volumes:
        #      - esdata1:/usr/share/elasticsearch/data
        #    ports:
        #      - 9300:9300
        #      - 9200:9200
        #  kibana:
        #    image: kibana:8.7.0
        #    environment:
        #      ELASTICSEARCH_URL: "http://elasticsearch:9300"
        #      KIBANA_SYSTEM_PASSWORD: "changeme"
        #    ports:
        #      - 5601:5601
        #    volumes:
        #      - ${PWD}/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
        #  logstash:
        #    image: logstash:8.7.0
        #    command: logstash -f /etc/logstash/conf.d/logstash.conf
        #    environment:
        #      LOGSTASH_INTERNAL_PASSWORD: "changeme"
        #    volumes:
        #      - ${PWD}/config/logstash.conf:/etc/logstash/conf.d/logstash.conf
        #    ports:
        #      - "5000:5000"

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: docker.io/bitnami/kafka:3.4
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      #KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper

  #https://hub.docker.com/r/bitnami/keycloak#configuration
  postgresql:
    image: docker.io/bitnami/postgresql:11
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_USERNAME=bn_keycloak
      - POSTGRESQL_DATABASE=bitnami_keycloak
    healthcheck:
      test: pg_isready -U postgres
      timeout: 20s
      retries: 10
    volumes:
      - 'postgresql_data:/bitnami/postgresql'

  keycloak:
    image: docker.io/bitnami/keycloak:20
    environment:
      - KEYCLOAK_HTTP_PORT=8089
    depends_on:
      postgresql:
        condition: service_healthy
    ports:
      - "8089:8089"
    healthcheck:
      test: curl -I http://keycloak:8089/realms/spmia-realm
      timeout: 20s
      retries: 10

  eureka-client-consumer:
    image: eureka-client-consumer:0.0.1-SNAPSHOT
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      TZ: "Etc/GMT-8"
      # https://stackoverflow.com/questions/60035294/how-to-specify-a-list-of-jvm-parameters-for-dockerized-springboot-rest-jar-execu
      # https://stackoverflow.com/questions/44491257/how-to-reduce-spring-boot-memory-usage
      # https://www.jvt.me/posts/2022/02/26/spring-environment-variable-go/
      JAVA_OPTS: "-XX:+UseSerialGC -Xss512k -XX:MaxRAM=72m"
      SERVER_TOMCAT_MAXTHREADS: "50"
    volumes:
      - ${PWD}/curl-amd64:/bin/curl
    healthcheck:
      test: curl -I http://eureka-client-consumer:8081
      timeout: 20s
      retries: 10
    depends_on:
      eureka-1:
        condition: service_started
      eureka-2:
        condition: service_started
        #  gateway-server:
        #    condition: service_started
      config-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy

  gateway-server:
    image: gateway-server:0.0.1-SNAPSHOT
    ports:
      - "8073:8073"
    environment:
      TZ: "Etc/GMT-8"
    volumes:
      - ${PWD}/curl-amd64:/bin/curl
    healthcheck:
      test: curl -I http://gateway-server:8073
      timeout: 20s
      retries: 10
    depends_on:
      eureka-1:
        condition: service_healthy
      eureka-2:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-client:
        condition: service_healthy
      eureka-client-consumer:
        condition: service_healthy

  gateway-server-2:
    image: gateway-server:0.0.1-SNAPSHOT
    ports:
      - "18073:18073"
    environment:
      TZ: "Etc/GMT-8"
      SERVER_PORT: 18073
    volumes:
      - ${PWD}/curl-amd64:/bin/curl
    healthcheck:
      test: curl -I http://gateway-server-2:18073
      timeout: 20s
      retries: 10
    depends_on:
      eureka-1:
        condition: service_healthy
      eureka-2:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-client:
        condition: service_healthy
      eureka-client-consumer:
        condition: service_healthy

  eureka-client:
    image: eureka-client:0.0.1-SNAPSHOT
    ports:
      - "8074:8074"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      TZ: "Etc/GMT-8"
    volumes:
      - ${PWD}/curl-amd64:/bin/curl
    healthcheck:
      test: curl -I http://eureka-client:8074
      timeout: 20s
      retries: 10
    depends_on:
      eureka-1:
        condition: service_healthy
      eureka-2:
        condition: service_healthy
      config-server:
        condition: service_healthy

  eureka-1:
    image: service-registry:0.0.1-SNAPSHOT
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker-eureka-1
      TZ: "Etc/GMT-8"
    volumes:
      - ${PWD}/curl-amd64:/bin/curl
    healthcheck:
      test: curl -I http://eureka-1:8761
      timeout: 20s
      retries: 10
    depends_on:
      config-server:
        condition: service_healthy

  eureka-2:
    image: service-registry:0.0.1-SNAPSHOT
    ports:
      - "8762:8762"
    environment:
      SPRING_PROFILES_ACTIVE: docker-eureka-2
      TZ: "Etc/GMT-8"
    volumes:
      - ${PWD}/curl-amd64:/bin/curl
    healthcheck:
      test: curl -I http://eureka-2:8762
      timeout: 20s
      retries: 10
    depends_on:
      config-server:
        condition: service_healthy

  config-server:
    image: config-server:0.0.1-SNAPSHOT
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      TZ: "Etc/GMT-8"
    volumes:
      - ${PWD}/curl-amd64:/bin/curl
    healthcheck:
      test: curl -I http://config-server:8888
      timeout: 20s
      retries: 10
    depends_on:
      gogs:
        condition: service_healthy

  gogs:
    image: gogs/gogs:latest
    ports:
      - "10880:3000"
    volumes:
      - ${PWD}/config-server/gogs:/data
    environment:
      TZ: "Etc/GMT-8"
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      # test: ["CMD", "(nc", "-z", "-w", "3", "localhost:22", "&&", "curl", "-o", "/dev/null", "-sS", "http://localhost:3000/healthcheck)", "||", "exit", "1"]
      test: (nc -z -w 3 localhost:22 && curl -o /dev/null -sS http://localhost:3000/healthcheck) || exit 1
      timeout: 20s
      retries: 10

  mysql:
    image: mysql:latest
    volumes:
      - mysql_data:/var/lib/mysql
        #      - ${PWD}/config-server/all-databases.sql:/docker-entrypoint-initdb.d/start.sql
    environment:
      TZ: "Etc/GMT-8"
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_USER: "user"
      MYSQL_PASSWORD: "password"
      MYSQL_DATABASE: "database"
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

volumes:
  mysql_data:
  postgresql_data:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  esdata1:
    driver: local
